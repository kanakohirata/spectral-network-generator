[output]
# a folder path to export results.
# if "output", export to "spectral_network_generator/output".
# you can use absolute path, e.g. "D:/output"
output_folder_path = output

# prefix of output files.
# if "project1", results will be exported to project1.edgeinfo.tsv and project1.cluster_attribute.tsv files in output_folder_path.
output_filename = project1

# whether or not to export spectral similarity score within reference.
# If you do, score file will be exported in a folder "ref_score_yyyymmddhhmmss"
# 0: do not, 1: do
export_reference_score = 0

# whether or not to export serialized reference spectra.
# If you do, spectra files are output to the folder where the reference score files are exported,
# and "export_reference_score" is forced to be 1.
# 0: do not, 1: do
export_serialized_reference_spectra = 0

[input]
# a folder path containing sample spectrum files.
# one spectrum file corresponds to one dataset.
input_sample_folder_path = input

# extension of sample files to load.
# msp, mgf and json is acceptable.
input_sample_extension = msp, mgf

# a folder path containing reference spectrum files.
input_ref_folder_path = ref_gcms

# extension of reference files to load.
# msp, mgf and json is acceptable.
input_ref_extension = msp, json

# folder path containing calculated reference score file("ref_score_yyyymmddhhmmss" folder).
# if you specify it, score data and config.ini in the folder will be reused.
# settings exclude [output] and [input] sections in the config.ini are used,
# and then "calculate_inner_reference" and "calculate_inter_reference" are forced to be 0.
input_calculated_ref_score_dir = 

# whether or not to reuse serialized reference spectra in "input_calculated_ref_score_dir"
# If you do, you should set a path to "input_calculated_ref_score_dir"
# 0: do not, 1: do
reuse_serialized_reference_spectra = 0

# a folder path containing blank spectrum files.
input_blank_folder_path = input/blank

# extension of blank files to load.
# msp, mgf and json is acceptable.
input_blank_extension =

# filenames for spectral data file treated as reference
# if empty, all file in input_ref_folder_path will be used.
ref_spec_filename =

# specify spectrum filename you want to turn into "DECOY". IF you want to make them all decoy, type "all"
# delimiter by ','
decoy =


[dataset]
# Specify the datasets for which you want to calculate a similarity score.
# A sample dataset means spectra of a specific sample file.
# A reference dataset means spectra of specific category set in 'ref_split_category'.
# calculate_inner_sample: calculate scores within a sample dataset.
# calculate_inter_sample: calculate scores within two different sample datasets.
# calculate_inter_sample_and_reference: calculate scores within a sample and reference datasets.
# calculate_inner_reference: calculate scores within a reference dataset.
# calculate_inter_reference: calculate scores within two different reference datasets.
# 0: do not, 1: do
calculate_inner_sample = 1
calculate_inter_sample = 1
calculate_inter_sample_and_reference = 1
calculate_inner_reference = 1
calculate_inter_reference = 1

# specify category by which data is split to datasets.
# cmpd_classification_superclass, cmpd_classification_class or cmpd_pathway are acceptable.
# If cmpd_classification_superclass is given, reference spectra will be divided by "Superclass",
# which is one of the hierarchical levels used to categorize chemical compounds in the ClassyFire (http://classyfire.wishartlab.com/) classification system.
# if cmpd_classification_superclass or cmpd_pathway, divide by "Class" in ClassyFire or biological pathway ID.
ref_split_category = cmpd_classification_superclass

# this is for dataset keyword
# If ref_split_category is cmpd_pathway and ref_select_keywords is SMP00198, records of SMP00198 will be used to generata a network.
# If ref_select_keywords is blank, all reference spectra will be used.
# delimiter by ';'
ref_select_keywords = 

# this is for dataset keyword to EXCLUDE
# if you want to exclude reference spectra with no classification, use "noclassification"
# delimiter by ';'
ref_exclude_keywords =


[filter]
# If you do not want to specify the following parameters, please leave them blank.

# filtering by author
# e.g. Stravs M; Schymanski E; Singer H; Department of Environmental Chemistry; Eawag
# delimiter by ';'
authors =

# filtering by name (mostly compound name)
# if you want to remove PC[xxx] and glyPC[xx], just type PC.
# list accepted. like PC,GC
name_key_characters_to_remove =

# filtering by instrument type
# choose from  LC-ESI-ITFT, LC-ESI-QFT, TOF, FT, QqQ, TOF_FT, GC.
instrument_type =

# filtering by ion mode
# positive or negative
ion_mode = positive

# filtering by precursor type
# e.g. [M+H]+, [M+Na]+, [M]+, [M-H]-, [M+Na-2H]-,
# delimiter by ','
precursor_type =

# ionization mode, ESI or APCI  or GC ...
# normally if you already specify LC-ESI-ITTOF, you do not have to specify here.
ionization = 

# fragmentation type CID(CID & LOW-ENERGY CID) or HCD.
fragmentation_type = 

# filtering by minimum number of peaks
# spectra with fewer peaks than min_number_of_peaks will be removed.
min_number_of_peaks =

# spectrum of compound that is specified in MetaCyc (https://metacyc.org/) dat files will be retained.
# delimiter by ','
path_of_compound_dat_for_filter =

# remove spectra with no precursor m/z
# do: 1, do not: 0
remove_spec_wo_prec_mz = 0

# specify file that you do NOT want to apply filters above.
# for instance your in-house reference spectra file without instrument type info.
# delimiter by ','
filename_avoid_filter = 

# ----- Top X peak rich spectra -----
# spectra with fewer product ions will be removed when a sample file has more spectra than num_top_X_peak_rich.
# !!! This filter is applied to each sample file.
num_top_X_peak_rich =


[spectrum processing]
# m/z tolerance to remove blank spectra from sample spectra.
# delimiter by ','
mz_tol_to_remove_blank = 0.01

# retention time tolerance in secconds to remove blank spectra from sample spectra.
# delimiter by ','
rt_tol_to_remove_blank = 10

# lower threshold for relative peak intensity. Maximum is 1.
# delimiter by ','
remove_low_intensity_peaks = 0.02

# intensity ratio to remove isotope.
# if 3, isotope whose intensity is less than 1/3 of monoisotope will be removed.
# default = 3
# !!! if you dont want to deisotope, set to -1
# delimiter by ','
deisotope_int_ratio = -1

# m/z tolerance to remove isotope.
# delimiter by ','
deisotope_mz_tol = 0.01

# binning peaks
# if topN_binned_ranges_bin_size is -1, binning and topN process is cancelled.
# if you want to keep 2 most intense peaks with bins of 100 m/z (0 - 100 m/z, 100 - 200 m/z, ...),
# set topN_binned_ranges_topN_number = 2, topN_binned_ranges_bin_size = 100
# delimiter by ','
topN_binned_ranges_topN_number = 2
topN_binned_ranges_bin_size = -1

# convert peak intensity after normalization of intensity.
# 0 : do nothing
# 2: log (1+x) (preventing negative value). intensity 0.1 will be  0.095310, intensity 1 will be 0.69314
# 3 : square root
# delimiter by ','
intensity_convert_mode = 0

# make spectra in same dataset non-redundant !!! Not working now !!!
# 0: do not, 1: do
make_spec_nr_in_ds = 0


[peak matching related]
# 1: CosineGreedy (https://github.com/matchms/matchms/blob/master/matchms/similarity/CosineGreedy.py)
# 2: ModifiedCosine (https://github.com/matchms/matchms/blob/master/matchms/similarity/ModifiedCosine.py)
#    You should set 1 to remove_spec_wo_prec_mz
spec_matching_mode = 1

# m/z tolerance for matching peaks.
# delimiter by ','
mz_tol = 0.5

# maximum number of product ion peaks to retain. If number of peaks > matching_top_N_input, remove low intensity peaks.
# !!! if you dont want to apply this parameter, set to -1
# delimiter by ','
matching_top_N_input = 20


[threshold]
# spectral similarity score to export. maximum is 1.
# delimiter by ','
score_threshold = 0.6

# if number of matched peak is equal to or greater than minimum_peak_match_to_output, will be exported.
# delimiter by ','
minimum_peak_match_to_output = 2


[external info files]
# a folder path containing compound table (TSV file).
# compound data will be added to spectra matched by InChIKey.
# Required column: InChIKey
# Acceptable columns:
# - CAS RN: CAS Registry Number
# - DBID: ID in the source database
# - InChI
# - MOLECULAR FORMULA
# - NAME
# - SUPERCLASS: Superclass is one of the hierarchical levels used to categorize chemical compounds
#               in the ClassyFire (http://classyfire.wishartlab.com/) classification system.
# - CLASS: a hierarchical level below Superclass
# - SUPERCLASS: a hierarchical level below Class
compound_table_folder_path = compound_table

# filename of MetaCyc compound/pathway dat file in compound_table_folder_path
# pathway id will be added to spectra matched by InChIKey.
metacyc_compound_dat =
metacyc_pathway_dat =

# if mode == 1, retain spectra of compounds that is described in the pathway written in the external file.
# if mode ==0, all spectra will be retained.
mode = 0
